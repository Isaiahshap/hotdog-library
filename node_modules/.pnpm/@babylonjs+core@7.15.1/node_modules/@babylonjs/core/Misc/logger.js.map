{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\n/**\r\n * Logger used throughout the application to allow configuration of\r\n * the log level required for the messages.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * No log\r\n     */\r\n    public static readonly NoneLogLevel = 0;\r\n    /**\r\n     * Only message logs\r\n     */\r\n    public static readonly MessageLogLevel = 1;\r\n    /**\r\n     * Only warning logs\r\n     */\r\n    public static readonly WarningLogLevel = 2;\r\n    /**\r\n     * Only error logs\r\n     */\r\n    public static readonly ErrorLogLevel = 4;\r\n    /**\r\n     * All logs\r\n     */\r\n    public static readonly AllLogLevel = 7;\r\n\r\n    /**\r\n     * Message to display when a message has been logged too many times\r\n     */\r\n    public static MessageLimitReached = \"Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.\";\r\n\r\n    private static _LogCache = \"\";\r\n    private static _LogLimitOutputs: { [message: string]: { limit: number; current: number } } = {};\r\n    // levels according to the (binary) numbering.\r\n    private static _Levels = [\r\n        {},\r\n        { color: \"white\", logFunc: console.log, name: \"Log\" },\r\n        { color: \"orange\", logFunc: console.warn, name: \"Warn\" },\r\n        {},\r\n        { color: \"red\", logFunc: console.error, name: \"Error\" },\r\n    ];\r\n\r\n    /**\r\n     * Gets a value indicating the number of loading errors\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static errorsCount = 0;\r\n\r\n    /**\r\n     * Callback called when a new log is added\r\n     */\r\n    public static OnNewCacheEntry: (entry: string) => void;\r\n\r\n    private static _CheckLimit(message: string, limit: number): boolean {\r\n        let entry = Logger._LogLimitOutputs[message];\r\n        if (!entry) {\r\n            entry = { limit, current: 1 };\r\n            Logger._LogLimitOutputs[message] = entry;\r\n        } else {\r\n            entry.current++;\r\n        }\r\n        return entry.current <= entry.limit;\r\n    }\r\n\r\n    private static _GenerateLimitMessage(message: string, level: number = 1): void {\r\n        const entry = Logger._LogLimitOutputs[message];\r\n        if (!entry || !Logger.MessageLimitReached) {\r\n            return;\r\n        }\r\n        const type = this._Levels[level];\r\n        if (entry.current === entry.limit) {\r\n            Logger[type.name as \"Log\" | \"Warn\" | \"Error\"](Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, type.name ?? \"\"));\r\n        }\r\n    }\r\n\r\n    private static _AddLogEntry(entry: string) {\r\n        Logger._LogCache = entry + Logger._LogCache;\r\n\r\n        if (Logger.OnNewCacheEntry) {\r\n            Logger.OnNewCacheEntry(entry);\r\n        }\r\n    }\r\n\r\n    private static _FormatMessage(message: string): string {\r\n        const padStr = (i: number) => (i < 10 ? \"0\" + i : \"\" + i);\r\n\r\n        const date = new Date();\r\n        return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _LogDisabled(message: string | any[], limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _LogEnabled(level: number = 1, message: string | any[], limit?: number): void {\r\n        // take first message if array\r\n        const msg = Array.isArray(message) ? message[0] : message;\r\n        if (limit !== undefined && !Logger._CheckLimit(msg, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(msg);\r\n        const type = this._Levels[level];\r\n        const optionals = Array.isArray(message) ? message.slice(1) : [];\r\n        type.logFunc && type.logFunc(\"BJS - \" + formattedMessage, ...optionals);\r\n\r\n        const entry = `<div style='color:${type.color}'>${formattedMessage}</div><br>`;\r\n        Logger._AddLogEntry(entry);\r\n        Logger._GenerateLimitMessage(msg, level);\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     */\r\n    public static Log: (message: string | any[], limit?: number) => void = Logger._LogEnabled.bind(Logger, Logger.MessageLogLevel);\r\n\r\n    /**\r\n     * Write a warning message to the console\r\n     */\r\n    public static Warn: (message: string | any[], limit?: number) => void = Logger._LogEnabled.bind(Logger, Logger.WarningLogLevel);\r\n\r\n    /**\r\n     * Write an error message to the console\r\n     */\r\n    public static Error: (message: string | any[], limit?: number) => void = Logger._LogEnabled.bind(Logger, Logger.ErrorLogLevel);\r\n\r\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\r\n    public static get LogCache(): string {\r\n        return Logger._LogCache;\r\n    }\r\n\r\n    /**\r\n     * Clears the log cache\r\n     */\r\n    public static ClearLogCache(): void {\r\n        Logger._LogCache = \"\";\r\n        Logger._LogLimitOutputs = {};\r\n        Logger.errorsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\r\n    public static set LogLevels(level: number) {\r\n        Logger.Log = Logger._LogDisabled;\r\n        Logger.Warn = Logger._LogDisabled;\r\n        Logger.Error = Logger._LogDisabled;\r\n        [Logger.MessageLogLevel, Logger.WarningLogLevel, Logger.ErrorLogLevel].forEach((l) => {\r\n            if ((level & l) === l) {\r\n                const type = this._Levels[l];\r\n                Logger[type.name as \"Log\" | \"Warn\" | \"Error\"] = Logger._LogEnabled.bind(Logger, l);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}