{"version":3,"file":"tools.functions.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/tools.functions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,KAAa;IACzC,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,GAAG;QACC,KAAK,IAAI,CAAC,CAAC;KACd,QAAQ,KAAK,GAAG,KAAK,EAAE;IAExB,OAAO,KAAK,KAAK,KAAK,CAAC;AAC3B,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,KAAa;IACnD,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACvC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAAC,CAAS;IAChC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IACxB,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAAC,CAAS;IAChC,CAAC,EAAE,CAAC;IACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACZ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACZ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACZ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACZ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC,EAAE,CAAC;IACJ,OAAO,CAAC,CAAC;AACb,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,QAAQ,CAAC,CAAS;IAC9B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAClB,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AACxB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAAC,KAAa,EAAE,GAAW,EAAE,IAAI,GAAG,SAAS,CAAC,iBAAiB;IAC3F,IAAI,GAAG,CAAC;IAER,QAAQ,IAAI,EAAE;QACV,KAAK,SAAS,CAAC,eAAe;YAC1B,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM;QACV,KAAK,SAAS,CAAC,iBAAiB;YAC5B,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YACxB,MAAM;QACV,KAAK,SAAS,CAAC,iBAAiB,CAAC;QACjC;YACI,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YACxB,MAAM;KACb;IAED,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9B,CAAC","sourcesContent":["import { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Function indicating if a number is an exponent of 2\r\n * @param value defines the value to test\r\n * @returns true if the value is an exponent of 2\r\n */\r\nexport function IsExponentOfTwo(value: number): boolean {\r\n    let count = 1;\r\n\r\n    do {\r\n        count *= 2;\r\n    } while (count < value);\r\n\r\n    return count === value;\r\n}\r\n\r\n/**\r\n * Interpolates between a and b via alpha\r\n * @param a The lower value (returned when alpha = 0)\r\n * @param b The upper value (returned when alpha = 1)\r\n * @param alpha The interpolation-factor\r\n * @returns The mixed value\r\n */\r\nexport function Mix(a: number, b: number, alpha: number): number {\r\n    return a * (1 - alpha) + b * alpha;\r\n}\r\n\r\n/**\r\n * Find the nearest power of two.\r\n * @param x Number to start search from.\r\n * @returns Next nearest power of two.\r\n */\r\nexport function NearestPOT(x: number): number {\r\n    const c = CeilingPOT(x);\r\n    const f = FloorPOT(x);\r\n    return c - x > x - f ? f : c;\r\n}\r\n\r\n/**\r\n * Find the next highest power of two.\r\n * @param x Number to start search from.\r\n * @returns Next highest power of two.\r\n */\r\nexport function CeilingPOT(x: number): number {\r\n    x--;\r\n    x |= x >> 1;\r\n    x |= x >> 2;\r\n    x |= x >> 4;\r\n    x |= x >> 8;\r\n    x |= x >> 16;\r\n    x++;\r\n    return x;\r\n}\r\n\r\n/**\r\n * Find the next lowest power of two.\r\n * @param x Number to start search from.\r\n * @returns Next lowest power of two.\r\n */\r\nexport function FloorPOT(x: number): number {\r\n    x = x | (x >> 1);\r\n    x = x | (x >> 2);\r\n    x = x | (x >> 4);\r\n    x = x | (x >> 8);\r\n    x = x | (x >> 16);\r\n    return x - (x >> 1);\r\n}\r\n\r\n/**\r\n * Get the closest exponent of two\r\n * @param value defines the value to approximate\r\n * @param max defines the maximum value to return\r\n * @param mode defines how to define the closest value\r\n * @returns closest exponent of two of the given value\r\n */\r\nexport function GetExponentOfTwo(value: number, max: number, mode = Constants.SCALEMODE_NEAREST): number {\r\n    let pot;\r\n\r\n    switch (mode) {\r\n        case Constants.SCALEMODE_FLOOR:\r\n            pot = FloorPOT(value);\r\n            break;\r\n        case Constants.SCALEMODE_NEAREST:\r\n            pot = NearestPOT(value);\r\n            break;\r\n        case Constants.SCALEMODE_CEILING:\r\n        default:\r\n            pot = CeilingPOT(value);\r\n            break;\r\n    }\r\n\r\n    return Math.min(pot, max);\r\n}\r\n"]}