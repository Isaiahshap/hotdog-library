{"version":3,"file":"decorators.functions.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/decorators.functions.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,MAAM,aAAa,GAAG,EAAE,CAAC;AAEzB,gEAAgE;AAChE,MAAM,uBAAuB,GAAG,EAAE,CAAC;AAEnC,gBAAgB;AAChB,MAAM,UAAU,cAAc,CAAC,MAAW;IACtC,MAAM,QAAQ,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IAEvC,IAAI,CAAO,uBAAwB,CAAC,QAAQ,CAAC,EAAE;QACrC,uBAAwB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;KACjD;IAED,OAAa,uBAAwB,CAAC,QAAQ,CAAC,CAAC;AACpD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,MAAW;IACtC,MAAM,QAAQ,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IAEvC,IAAU,aAAc,CAAC,QAAQ,CAAC,EAAE;QAChC,OAAa,aAAc,CAAC,QAAQ,CAAC,CAAC;KACzC;IAEK,aAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IAEpC,MAAM,KAAK,GAAS,aAAc,CAAC,QAAQ,CAAC,CAAC;IAC7C,IAAI,aAAa,GAAG,MAAM,CAAC;IAC3B,IAAI,UAAU,GAAG,QAAQ,CAAC;IAC1B,OAAO,UAAU,EAAE;QACf,MAAM,YAAY,GAAS,uBAAwB,CAAC,UAAU,CAAC,CAAC;QAChE,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE;YACjC,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;SAC5C;QAED,IAAI,MAAW,CAAC;QAChB,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,GAAG;YACC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;gBACtB,IAAI,GAAG,IAAI,CAAC;gBACZ,MAAM;aACT;YAED,IAAI,MAAM,CAAC,YAAY,EAAE,KAAK,UAAU,EAAE;gBACtC,MAAM;aACT;YAED,aAAa,GAAG,MAAM,CAAC;SAC1B,QAAQ,MAAM,EAAE;QAEjB,IAAI,IAAI,EAAE;YACN,MAAM;SACT;QAED,UAAU,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QACnC,aAAa,GAAG,MAAM,CAAC;KAC1B;IAED,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst __mergedStore = {};\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst __decoratorInitialStore = {};\r\n\r\n/** @internal */\r\nexport function GetDirectStore(target: any): any {\r\n    const classKey = target.getClassName();\r\n\r\n    if (!(<any>__decoratorInitialStore)[classKey]) {\r\n        (<any>__decoratorInitialStore)[classKey] = {};\r\n    }\r\n\r\n    return (<any>__decoratorInitialStore)[classKey];\r\n}\r\n\r\n/**\r\n * @returns the list of properties flagged as serializable\r\n * @param target host object\r\n */\r\nexport function GetMergedStore(target: any): any {\r\n    const classKey = target.getClassName();\r\n\r\n    if ((<any>__mergedStore)[classKey]) {\r\n        return (<any>__mergedStore)[classKey];\r\n    }\r\n\r\n    (<any>__mergedStore)[classKey] = {};\r\n\r\n    const store = (<any>__mergedStore)[classKey];\r\n    let currentTarget = target;\r\n    let currentKey = classKey;\r\n    while (currentKey) {\r\n        const initialStore = (<any>__decoratorInitialStore)[currentKey];\r\n        for (const property in initialStore) {\r\n            store[property] = initialStore[property];\r\n        }\r\n\r\n        let parent: any;\r\n        let done = false;\r\n\r\n        do {\r\n            parent = Object.getPrototypeOf(currentTarget);\r\n            if (!parent.getClassName) {\r\n                done = true;\r\n                break;\r\n            }\r\n\r\n            if (parent.getClassName() !== currentKey) {\r\n                break;\r\n            }\r\n\r\n            currentTarget = parent;\r\n        } while (parent);\r\n\r\n        if (done) {\r\n            break;\r\n        }\r\n\r\n        currentKey = parent.getClassName();\r\n        currentTarget = parent;\r\n    }\r\n\r\n    return store;\r\n}\r\n"]}