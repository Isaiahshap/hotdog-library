{"version":3,"file":"biPlanarBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/biPlanarBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { TriPlanarBlock } from \"./triPlanarBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { ShaderLanguage } from \"../../../Materials/shaderLanguage\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\n/**\r\n * Block used to read a texture with triplanar mapping (see https://iquilezles.org/articles/biplanar/)\r\n */\r\nexport class BiPlanarBlock extends TriPlanarBlock {\r\n    /**\r\n     * Create a new BiPlanarBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"BiPlanarBlock\";\r\n    }\r\n\r\n    private _declareLocalVarAsVec3I(name: string, state: NodeMaterialBuildState): string {\r\n        if (state.shaderLanguage === ShaderLanguage.WGSL) {\r\n            return `var ${name}: vec3<i32>`;\r\n        } else {\r\n            return `ivec3 ${name}`;\r\n        }\r\n    }\r\n\r\n    private _getTextureGrad(state: NodeMaterialBuildState, samplerName: string) {\r\n        if (state.shaderLanguage === ShaderLanguage.WGSL) {\r\n            return `textureSampleGrad(${samplerName},${samplerName + Constants.AUTOSAMPLERSUFFIX}`;\r\n        }\r\n\r\n        return `textureGrad(${samplerName}`;\r\n    }\r\n\r\n    protected override _generateTextureLookup(state: NodeMaterialBuildState): void {\r\n        const samplerName = this.samplerName;\r\n        const samplerYName = this.samplerYName ?? this.samplerName;\r\n\r\n        const sharpness = this.sharpness.isConnected ? this.sharpness.associatedVariableName : \"1.0\";\r\n\r\n        const dpdx = state._getFreeVariableName(\"dxValue\");\r\n        const dpdy = state._getFreeVariableName(\"dyValue\");\r\n        const n = state._getFreeVariableName(\"n\");\r\n        const ma = state._getFreeVariableName(\"ma\");\r\n        const mi = state._getFreeVariableName(\"mi\");\r\n        const me = state._getFreeVariableName(\"me\");\r\n        const x = state._getFreeVariableName(\"x\");\r\n        const y = state._getFreeVariableName(\"y\");\r\n        const w = state._getFreeVariableName(\"w\");\r\n\r\n        let ivec3 = \"ivec3\";\r\n        let dpdxFunc = \"dFdx\";\r\n        let dpdyFunc = \"dFdy\";\r\n        const suffix = state.fSuffix;\r\n\r\n        if (state.shaderLanguage === ShaderLanguage.WGSL) {\r\n            ivec3 = \"vec3<i32>\";\r\n            dpdxFunc = \"dpdx\";\r\n            dpdyFunc = \"dpdy\";\r\n        }\r\n\r\n        state.compilationString += `\r\n            // grab coord derivatives for texturing\r\n            ${state._declareLocalVar(dpdx, NodeMaterialBlockConnectionPointTypes.Vector3)} = ${dpdxFunc}(${this.position.associatedVariableName}.xyz);\r\n            ${state._declareLocalVar(dpdy, NodeMaterialBlockConnectionPointTypes.Vector3)} = ${dpdyFunc}(${this.position.associatedVariableName}.xyz);\r\n            ${state._declareLocalVar(n, NodeMaterialBlockConnectionPointTypes.Vector3)} = abs(${this.normal.associatedVariableName}.xyz);\r\n        \r\n            // determine major axis (in x; yz are following axis)\r\n            ${this._declareLocalVarAsVec3I(ma, state)} = ${state._generateTernary(\r\n                `${ivec3}(0,1,2)`,\r\n                `${state._generateTernary(`${ivec3}(1,2,0)`, `${ivec3}(2,0,1)`, `(${n}.y>${n}.z)`)}`,\r\n                `(${n}.x>${n}.y && ${n}.x>${n}.z)`\r\n            )};                    \r\n\r\n            // determine minor axis (in x; yz are following axis)\r\n            ${this._declareLocalVarAsVec3I(mi, state)} =  ${state._generateTernary(\r\n                `${ivec3}(0,1,2)`,\r\n                `${state._generateTernary(`${ivec3}(1,2,0)`, `${ivec3}(2,0,1)`, `(${n}.y<${n}.z)`)}`,\r\n                `(${n}.x<${n}.y && ${n}.x<${n}.z)`\r\n            )};  \r\n                              \r\n            // determine median axis (in x;  yz are following axis)\r\n            ${this._declareLocalVarAsVec3I(me, state)} = ${ivec3}(3) - ${mi} - ${ma};\r\n            \r\n            // project+fetch\r\n            ${state._declareLocalVar(x, NodeMaterialBlockConnectionPointTypes.Vector4)} = ${this._getTextureGrad(state, samplerName)}, vec2${suffix}(${this.position.associatedVariableName}[${ma}.y], ${this.position.associatedVariableName}[${ma}.z]), \r\n                                    vec2${suffix}(${dpdx}[${ma}.y],${dpdx}[${ma}.z]), \r\n                                    vec2${suffix}(${dpdy}[${ma}.y],${dpdy}[${ma}.z]));\r\n            ${state._declareLocalVar(y, NodeMaterialBlockConnectionPointTypes.Vector4)} = ${this._getTextureGrad(state, samplerYName)}, vec2${suffix}(${this.position.associatedVariableName}[${me}.y], ${this.position.associatedVariableName}[${me}.z]), \r\n                                    vec2${suffix}(${dpdx}[${me}.y],${dpdx}[${me}.z]),\r\n                                    vec2${suffix}(${dpdy}[${me}.y],${dpdy}[${me}.z]));\r\n            \r\n            // blend factors\r\n            ${state._declareLocalVar(w, NodeMaterialBlockConnectionPointTypes.Vector2)} = vec2${suffix}(${n}[${ma}.x],${n}[${me}.x]);\r\n            // make local support\r\n            ${w} = clamp( (${w}-0.5773)/(1.0-0.5773), vec2${suffix}(0.0), vec2${suffix}(1.0) );\r\n            // shape transition\r\n            ${w} = pow( ${w}, vec2${suffix}(${sharpness}/8.0) );\r\n            // blend and return\r\n            ${state._declareLocalVar(this._tempTextureRead, NodeMaterialBlockConnectionPointTypes.Vector4)} = (${x}*${w}.x + ${y}*${w}.y) / (${w}.x + ${w}.y);\r\n        `;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BiPlanarBlock\", BiPlanarBlock);\r\n"]}