{"version":3,"file":"baseMathBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/baseMathBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mCAAmC,CAAC;AAC7E,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEzD,OAAO,EAAE,qCAAqC,EAAE,MAAM,gDAAgD,CAAC;AAEvG;;GAEG;AACH,MAAM,OAAO,aAAc,SAAQ,iBAAiB;IAGhD,YAAsB,IAAY;QAC9B,KAAK,CAAC,IAAI,EAAE,wBAAwB,CAAC,OAAO,CAAC,CAAC;QAE9C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,qCAAqC,CAAC,UAAU,CAAC,CAAC;QAC7E,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,qCAAqC,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,qCAAqC,CAAC,YAAY,CAAC,CAAC;QAElF,IAAI,CAAC,MAAM,CAAC,qBAAqB,GAAG,IAAI,CAAC,IAAI,CAAC;QAC9C,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAEtC,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,qCAAqC,CAAC,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,IAAI,CAAC,qCAAqC,CAAC,KAAK,CAAC,CAAC;QAE1F,IAAI,CAAC,oBAAoB,GAAG;YACxB,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC3E,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;SAC/E,CAAC;IACN,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAEO,uBAAuB;QAC3B,iGAAiG;QACjG,IAAI,CAAC,MAAM,CAAC,qBAAqB,GAAG,IAAI,CAAC,IAAI,CAAC;QAE9C,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACjD,+FAA+F;YAC/F,IACI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,qCAAqC,CAAC,GAAG;gBAC5D,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,qCAAqC,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,qCAAqC,CAAC,GAAG,CAAC,EACnI;gBACE,IAAI,CAAC,MAAM,CAAC,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC;aAClD;SACJ;aAAM,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACzD,qGAAqG;YACrG,IAAI,CAAC,MAAM,CAAC,qBAAqB,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;SACtF;QAED,8GAA8G;QAC9G,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACjD,KAAK,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI;gBAC1B,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC;gBACvB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC;aAC1B,EAAE;gBACC,gCAAgC;gBAChC,KAAK,CAAC,4BAA4B,GAAG,CAAC,qCAAqC,CAAC,GAAG,EAAE,qCAAqC,CAAC,KAAK,CAAC,CAAC;gBAE9H,IAAI,MAAM,CAAC,WAAW,EAAE;oBACpB,4DAA4D;oBAC5D,KAAK,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAErD,gFAAgF;oBAChF,IAAI,MAAM,CAAC,IAAI,KAAK,qCAAqC,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,KAAK,qCAAqC,CAAC,KAAK,EAAE;wBAC1H,KAAK,CAAC,4BAA4B,CAAC,IAAI,CACnC,qCAAqC,CAAC,OAAO,EAC7C,qCAAqC,CAAC,OAAO,EAC7C,qCAAqC,CAAC,OAAO,EAC7C,qCAAqC,CAAC,MAAM,EAC5C,qCAAqC,CAAC,MAAM,EAC5C,qCAAqC,CAAC,MAAM,CAC/C,CAAC;qBACL;iBACJ;aACJ;SACJ;IACL,CAAC;IAED;;OAEG;IACa,OAAO;QACnB,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC;IACzC,CAAC;CACJ","sourcesContent":["import type { Observer } from \"core/Misc/observable\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\n\r\n/**\r\n * Block used to perform a mathematical operation on 2 values\r\n */\r\nexport class BaseMathBlock extends NodeMaterialBlock {\r\n    private readonly _connectionObservers: Observer<NodeMaterialBlockConnectionPointTypes>[];\r\n\r\n    protected constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this.output._typeConnectionSource = this.left;\r\n        this._linkConnectionTypes(0, 1, true);\r\n\r\n        this.left.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.right.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this._connectionObservers = [\r\n            this.left.onTypeChangedObservable.add(() => this._updateInputOutputTypes()),\r\n            this.right.onTypeChangedObservable.add(() => this._updateInputOutputTypes()),\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Gets the left operand input component\r\n     */\r\n    public get left(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right operand input component\r\n     */\r\n    public get right(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    private _updateInputOutputTypes() {\r\n        // First update the output type with the initial assumption that we'll base it on the left input.\r\n        this.output._typeConnectionSource = this.left;\r\n\r\n        if (this.left.isConnected && this.right.isConnected) {\r\n            // Both inputs are connected, so we need to determine the output type based on the input types.\r\n            if (\r\n                this.left.type === NodeMaterialBlockConnectionPointTypes.Int ||\r\n                (this.left.type === NodeMaterialBlockConnectionPointTypes.Float && this.right.type !== NodeMaterialBlockConnectionPointTypes.Int)\r\n            ) {\r\n                this.output._typeConnectionSource = this.right;\r\n            }\r\n        } else if (this.left.isConnected !== this.right.isConnected) {\r\n            // Only one input is connected, so we need to determine the output type based on the connected input.\r\n            this.output._typeConnectionSource = this.left.isConnected ? this.left : this.right;\r\n        }\r\n\r\n        // Next update the accepted connection point types for the inputs based on the current input connection state.\r\n        if (this.left.isConnected || this.right.isConnected) {\r\n            for (const [first, second] of [\r\n                [this.left, this.right],\r\n                [this.right, this.left],\r\n            ]) {\r\n                // Always allow Ints and Floats.\r\n                first.acceptedConnectionPointTypes = [NodeMaterialBlockConnectionPointTypes.Int, NodeMaterialBlockConnectionPointTypes.Float];\r\n\r\n                if (second.isConnected) {\r\n                    // The same types as the connected input are always allowed.\r\n                    first.acceptedConnectionPointTypes.push(second.type);\r\n\r\n                    // If the other input is a scalar, then we also allow Vector/Color/Matrix types.\r\n                    if (second.type === NodeMaterialBlockConnectionPointTypes.Int || second.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                        first.acceptedConnectionPointTypes.push(\r\n                            NodeMaterialBlockConnectionPointTypes.Vector2,\r\n                            NodeMaterialBlockConnectionPointTypes.Vector3,\r\n                            NodeMaterialBlockConnectionPointTypes.Vector4,\r\n                            NodeMaterialBlockConnectionPointTypes.Color3,\r\n                            NodeMaterialBlockConnectionPointTypes.Color4,\r\n                            NodeMaterialBlockConnectionPointTypes.Matrix\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release resources\r\n     */\r\n    public override dispose(): void {\r\n        super.dispose();\r\n        this._connectionObservers.forEach((observer) => observer.remove());\r\n        this._connectionObservers.length = 0;\r\n    }\r\n}\r\n"]}