{"version":3,"file":"effect.webgl.functions.js","sourceRoot":"","sources":["../../../../dev/core/src/Materials/effect.webgl.functions.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,kBAAkB,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAEzF,OAAO,EAAE,oCAAoC,EAAE,uBAAuB,EAAE,qBAAqB,EAAE,cAAc,EAAE,2CAA0C;AAEzJ,OAAO,EAAE,iBAAiB,EAAE,+CAA8C;AAE1E,OAAO,EAAE,WAAW,EAAE,kCAAiC;AAEvD;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CACzC,OAAmC,EACnC,OAAuD,EACvD,iCAAwF,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,EACjI,mCAA4F,uBAAuB;IAEnH,oCAAoC;IACpC,cAAc,CAAC,OAAO,CAAC,CAAC;IACxB,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,QAAQ,CAAC;IACtD,IAAI,SAAS,GAAG,OAAO,CAAC,yBAAyB,EAAE,SAAS,CAAC;IAC7D,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,+BAAuB,CAAC;IAC/D,8CAA8C;IAC9C,+EAA+E;IAC/E,IAAI,CAAC,SAAS,EAAE;QACZ,QAAQ,YAAY,EAAE;YAClB,KAAK,QAAQ;gBACT,SAAS,GAAG,IAAI,CAAC,MAAM,MAAM,6CAA4C,CAAC,CAAC,oBAAoB,EAAE,CAAC;gBAClG,MAAM;YACV,KAAK,QAAQ,CAAC;YACd;gBACI,SAAS,GAAG,IAAI,CAAC,MAAM,MAAM,8CAA6C,CAAC,CAAC,qBAAqB,EAAE,CAAC;gBACpG,MAAM;SACb;KACJ;IACD,MAAM,SAAS,GAAQ,OAAO,CAAC,mBAAmB,CAAC;IACnD,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,YAAY,IAAI,SAAS,CAAC;IACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC;IAC7E,MAAM,aAAa,GAAG,iBAAiB,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IAC7D,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjG,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrH,sDAAsD;IACtD,MAAM,gBAAgB,GAAsB;QACxC,OAAO;QACP,eAAe,EAAE,SAAS;QAC1B,UAAU,EAAE,KAAK;QACjB,4BAA4B,EAAE,IAAI;QAClC,SAAS;QACT,sBAAsB,EAAE,KAAK;QAC7B,iBAAiB,EAAE,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC;QAC7D,oBAAoB,EAAE,WAAW,CAAC,uBAAuB,CAAC,QAAQ,CAAC;QACnE,OAAO,EAAE,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK;QAClD,YAAY;QACZ,iBAAiB,EAAE,IAAI;QACvB,eAAe,EAAE,KAAK;QACtB,qBAAqB,EAAE,KAAK;QAC5B,GAAG,OAAO,CAAC,yBAAyB;KACvC,CAAC;IACF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,IAAI;YACA,kBAAkB,CACd,gBAAgB,EAChB,SAAS,EACT,SAAS,EACT,UAAU,UAAU,EAAE,YAAY;gBAC9B,IAAI;oBACA,MAAM,QAAQ,GAAG,+BAA+B,CAC5C;wBACI,IAAI,EAAE,GAAG;wBACT,MAAM,EAAE,UAAU;wBAClB,QAAQ,EAAE,YAAY;wBACtB,OAAO;wBACP,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;wBACnD,uBAAuB,EAAE,OAAO,CAAC,yBAAyB,EAAE,iBAAiB,IAAI,IAAI;wBACrF,yBAAyB,EAAE,IAAI;wBAC/B,GAAG,OAAO,CAAC,6BAA6B;qBAC3C,EACD,8BAA8B,EAC9B,uBAAuB,EACvB,oCAAoC,CACvC,CAAC;oBACF,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACrB;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,CAAC,CAAC,CAAC,CAAC;iBACb;YACL,CAAC,EACD,QAAQ,CACX,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC,CAAC,CAAC;SACb;IACL,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\nimport type { IPipelineGenerationOptions } from \"./effect.functions\";\r\nimport { _processShaderCode, createAndPreparePipelineContext } from \"./effect.functions\";\r\nimport type { IPipelineContext } from \"core/Engines/IPipelineContext\";\r\nimport { _executeWhenRenderingStateIsCompiled, _preparePipelineContext, createPipelineContext, getStateObject } from \"core/Engines/thinEngine.functions\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { _getGlobalDefines } from \"core/Engines/abstractEngine.functions\";\r\nimport type { ProcessingOptions } from \"core/Engines/Processors/shaderProcessingOptions\";\r\nimport { ShaderStore } from \"core/Engines/shaderStore\";\r\n\r\n/**\r\n * Generate a pipeline context from the provided options\r\n * Note - at the moment only WebGL is supported\r\n * @param options the options to be used when generating the pipeline\r\n * @param context the context to be used when creating the pipeline\r\n * @param createPipelineContextInjection the function to create the pipeline context\r\n * @param _preparePipelineContextInjection the function to prepare the pipeline context\r\n * @returns a promise that resolves to the pipeline context\r\n */\r\nexport async function generatePipelineContext(\r\n    options: IPipelineGenerationOptions,\r\n    context: WebGL2RenderingContext | WebGLRenderingContext,\r\n    createPipelineContextInjection: typeof AbstractEngine.prototype.createPipelineContext = createPipelineContext.bind(null, context),\r\n    _preparePipelineContextInjection: typeof AbstractEngine.prototype._preparePipelineContext = _preparePipelineContext\r\n): Promise<IPipelineContext> {\r\n    // make sure the state object exists\r\n    getStateObject(context);\r\n    const platformName = options.platformName || \"WEBGL2\";\r\n    let processor = options.extendedProcessingOptions?.processor;\r\n    const language = options.shaderLanguage || ShaderLanguage.GLSL;\r\n    // auto-populate the processor if not provided\r\n    // Note - async but can be synchronous if we load all dependencies at the start\r\n    if (!processor) {\r\n        switch (platformName) {\r\n            case \"WEBGL1\":\r\n                processor = new (await import(\"core/Engines/WebGL/webGLShaderProcessors\")).WebGLShaderProcessor();\r\n                break;\r\n            case \"WEBGL2\":\r\n            default:\r\n                processor = new (await import(\"core/Engines/WebGL/webGL2ShaderProcessors\")).WebGL2ShaderProcessor();\r\n                break;\r\n        }\r\n    }\r\n    const shaderDef: any = options.shaderNameOrContent;\r\n    const vertex = shaderDef.vertex || shaderDef.vertexSource || shaderDef;\r\n    const fragment = shaderDef.fragment || shaderDef.fragmentSource || shaderDef;\r\n    const globalDefines = _getGlobalDefines()?.split(\"\\n\") || [];\r\n    const defines = [...(options.defines || []), ...(options.addGlobalDefines ? globalDefines : [])];\r\n    const key = options.key?.replace(/\\r/g, \"\").replace(/\\n/g, \"|\") || vertex + \"+\" + fragment + \"@\" + defines.join(\"|\");\r\n    // defaults, extended with optionally provided options\r\n    const processorOptions: ProcessingOptions = {\r\n        defines,\r\n        indexParameters: undefined,\r\n        isFragment: false,\r\n        shouldUseHighPrecisionShader: true,\r\n        processor,\r\n        supportsUniformBuffers: false,\r\n        shadersRepository: ShaderStore.GetShadersRepository(language),\r\n        includesShadersStore: ShaderStore.GetIncludesShadersStore(language),\r\n        version: platformName === \"WEBGL2\" ? \"200\" : \"100\",\r\n        platformName,\r\n        processingContext: null,\r\n        isNDCHalfZRange: false,\r\n        useReverseDepthBuffer: false,\r\n        ...options.extendedProcessingOptions,\r\n    };\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            _processShaderCode(\r\n                processorOptions,\r\n                shaderDef,\r\n                undefined,\r\n                function (vertexCode, fragmentCode) {\r\n                    try {\r\n                        const pipeline = createAndPreparePipelineContext(\r\n                            {\r\n                                name: key,\r\n                                vertex: vertexCode,\r\n                                fragment: fragmentCode,\r\n                                context,\r\n                                defines: defines.length ? defines.join(\"\\n\") : null,\r\n                                shaderProcessingContext: options.extendedProcessingOptions?.processingContext || null,\r\n                                transformFeedbackVaryings: null,\r\n                                ...options.extendedCreatePipelineOptions,\r\n                            },\r\n                            createPipelineContextInjection,\r\n                            _preparePipelineContext,\r\n                            _executeWhenRenderingStateIsCompiled\r\n                        );\r\n                        resolve(pipeline);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                },\r\n                language\r\n            );\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n"]}