{"version":3,"file":"flowGraphInteger.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphInteger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IASzB,YAAY,KAAa;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,CAAS;QACpB,OAAO,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAC,KAAuB;QAC9B,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAuB;QACnC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAuB;QACnC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACpE,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAuB;QACjC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;;OAGG;IACI,YAAY;QACf,OAAO,gBAAgB,CAAC,SAAS,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAuB;QACjC,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC;IACtC,CAAC;IAID;;;;OAIG;IACI,MAAM,CAAC,KAAK,CAAC,mBAAwB;QACxC,OAAO,IAAI,gBAAgB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;;AATa,0BAAS,GAAG,kBAAkB,CAAC;AAWjD,aAAa,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC","sourcesContent":["import { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * @experimental\r\n * Class that represents an integer value.\r\n */\r\nexport class FlowGraphInteger {\r\n    /**\r\n     * The value of the integer. Its type\r\n     * is a javascript number. Shouldn't be\r\n     * directly modified - it is populated by\r\n     * the constructor.\r\n     */\r\n    readonly value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = this._toInt(value);\r\n    }\r\n\r\n    /**\r\n     * Converts a float to an integer.\r\n     * @param n the float to convert\r\n     * @returns the result of n | 0 - converting it to a int\r\n     */\r\n    private _toInt(n: number): number {\r\n        return n | 0;\r\n    }\r\n\r\n    /**\r\n     * Adds two integers together.\r\n     * @param other the other integer to add\r\n     * @returns a FlowGraphInteger with the result of the addition\r\n     */\r\n    public add(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value + other.value);\r\n    }\r\n\r\n    /**\r\n     * Subtracts two integers.\r\n     * @param other the other integer to subtract\r\n     * @returns a FlowGraphInteger with the result of the subtraction\r\n     */\r\n    public subtract(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value - other.value);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two integers.\r\n     * @param other the other integer to multiply\r\n     * @returns a FlowGraphInteger with the result of the multiplication\r\n     */\r\n    public multiply(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(Math.imul(this.value, other.value));\r\n    }\r\n\r\n    /**\r\n     * Divides two integers.\r\n     * @param other the other integer to divide\r\n     * @returns a FlowGraphInteger with the result of the division\r\n     */\r\n    public divide(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value / other.value);\r\n    }\r\n\r\n    /**\r\n     * The class name of this type.\r\n     * @returns\r\n     */\r\n    public getClassName() {\r\n        return FlowGraphInteger.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Compares two integers for equality.\r\n     * @param other the other integer to compare\r\n     * @returns\r\n     */\r\n    public equals(other: FlowGraphInteger): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    public static ClassName = \"FlowGraphInteger\";\r\n\r\n    /**\r\n     * Parses a FlowGraphInteger from a serialization object.\r\n     * @param serializationObject\r\n     * @returns\r\n     */\r\n    public static Parse(serializationObject: any): FlowGraphInteger {\r\n        return new FlowGraphInteger(serializationObject.value);\r\n    }\r\n}\r\nRegisterClass(\"FlowGraphInteger\", FlowGraphInteger);\r\n"]}