{"version":3,"file":"flowGraphPathConverter.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphPathConverter.ts"],"names":[],"mappings":"AAIA;;;GAGG;AACH,MAAM,OAAO,sBAAsB;IAC/B,YACY,QAA0B,EAC1B,aAAqB,GAAG;QADxB,aAAQ,GAAR,QAAQ,CAAkB;QAC1B,eAAU,GAAV,UAAU,CAAc;IACjC,CAAC;IAEG,OAAO,CAAC,IAAY;QACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,QAAQ,IAAI,aAAa,CAAC,CAAC;SAC9C;QACD,IAAI,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACvC,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3C;QACD,OAAO;YACH,MAAM,EAAE,aAAa;YACrB,IAAI,EAAE;gBACF,IAAI,EAAE,QAAQ;gBACd,GAAG,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC;gBAClC,GAAG,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBACtD,SAAS,EAAE,GAAG,EAAE,CAAC,aAAa;aACjC;SACJ,CAAC;IACN,CAAC;CACJ","sourcesContent":["import type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport type { IPathToObjectConverter, IObjectInfo } from \"../ObjectModel/objectModelInterfaces\";\r\nimport type { IObjectAccessor } from \"./typeDefinitions\";\r\n\r\n/**\r\n * @experimental\r\n * A path converter that converts a path on the flow graph context variables to an object accessor.\r\n */\r\nexport class FlowGraphPathConverter implements IPathToObjectConverter<IObjectAccessor> {\r\n    public constructor(\r\n        private _context: FlowGraphContext,\r\n        private _separator: string = \"/\"\r\n    ) {}\r\n\r\n    public convert(path: string): IObjectInfo<IObjectAccessor> {\r\n        const parts = path.split(this._separator);\r\n        if (parts.length < 2) {\r\n            throw new Error(`Path ${path} is invalid`);\r\n        }\r\n        let currentObject = this._context.getVariable(parts[0]);\r\n        const property = parts[parts.length - 1];\r\n        for (let i = 1; i < parts.length - 1; i++) {\r\n            currentObject = currentObject[parts[i]];\r\n        }\r\n        return {\r\n            object: currentObject,\r\n            info: {\r\n                type: \"object\",\r\n                get: () => currentObject[property],\r\n                set: (value: any) => (currentObject[property] = value),\r\n                getObject: () => currentObject,\r\n            },\r\n        };\r\n    }\r\n}\r\n"]}