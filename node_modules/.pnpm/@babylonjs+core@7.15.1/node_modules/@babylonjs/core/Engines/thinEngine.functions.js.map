{"version":3,"file":"thinEngine.functions.js","sourceRoot":"","sources":["../../../../dev/core/src/Engines/thinEngine.functions.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,OAAO,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AAiBhE;;GAEG;AACH,MAAM,YAAY,GAAkD,IAAI,OAAO,EAAE,CAAC;AAElF;;GAEG;AACH,MAAM,iBAAiB,GAA2B;IAC9C,aAAa,EAAE,CAAC;IAChB,eAAe,EAAE,EAAE;CACtB,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,UAAU,cAAc,CAAC,OAAqB;IAChD,IAAI,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtC,IAAI,CAAC,KAAK,EAAE;QACR,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,iBAAiB,CAAC;SAC5B;QACD,KAAK,GAAG;YACJ,sFAAsF;YACtF,aAAa,EAAG,OAAkC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7E,QAAQ,EAAE,OAAO;YACjB,eAAe,EAAE,EAAE;SACtB,CAAC;QACF,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KACpC;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAAC,OAAqB;IACnD,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAGD;;;;;;;;;GASG;AACH,MAAM,UAAU,sBAAsB,CAClC,eAAiC,EACjC,UAAkB,EAClB,YAAoB,EACpB,OAAqB,EACrB,yBAA6C,EAC7C,6BAA2D;IAE3D,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;IAC5C,IAAI,CAAC,6BAA6B,EAAE;QAChC,6BAA6B,GAAG,WAAW,CAAC,6BAA6B,IAAI,oBAAoB,CAAC;KACrG;IAED,MAAM,YAAY,GAAG,iBAAiB,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;IACnG,MAAM,cAAc,GAAG,iBAAiB,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;IAEzG,OAAO,6BAA6B,CAChC,eAAuC,EACvC,YAAY,EACZ,cAAc,EACd,OAAO,EACP,yBAAyB,EACzB,WAAW,CAAC,sBAAsB,CACrC,CAAC;AACN,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,mBAAmB,CAC/B,eAAiC,EACjC,UAAkB,EAClB,YAAoB,EACpB,OAAyB,EACzB,OAAqB,EACrB,4BAAgD,IAAI,EACpD,6BAA2D;IAE3D,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;IAC5C,IAAI,CAAC,6BAA6B,EAAE;QAChC,6BAA6B,GAAG,WAAW,CAAC,6BAA6B,IAAI,oBAAoB,CAAC;KACrG;IACD,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,EAAE,CAAC;IAChG,MAAM,YAAY,GAAG,cAAc,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;IACxH,MAAM,cAAc,GAAG,cAAc,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;IAE9H,OAAO,6BAA6B,CAChC,eAAuC,EACvC,YAAY,EACZ,cAAc,EACd,OAAO,EACP,yBAAyB,EACzB,WAAW,CAAC,sBAAsB,CACrC,CAAC;AACN,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,qBAAqB,CAAC,OAAqB,EAAE,wBAA2D;IACpH,MAAM,eAAe,GAAG,IAAI,oBAAoB,EAAE,CAAC;IACnD,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;IAC5C,IAAI,WAAW,CAAC,qBAAqB,EAAE;QACnC,eAAe,CAAC,kBAAkB,GAAG,IAAI,CAAC;KAC7C;IACD,eAAe,CAAC,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;IAC/C,OAAO,eAAe,CAAC;AAC3B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAChC,eAAqC,EACrC,YAAyB,EACzB,cAA2B,EAC3B,OAAqB,EACrB,6BAAiD,IAAI,EACrD,sBAAgC;IAEhC,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC9C,eAAe,CAAC,OAAO,GAAG,aAAa,CAAC;IAExC,IAAI,CAAC,aAAa,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;KAC/C;IAED,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IAClD,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IAEpD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAEnC,eAAe,CAAC,OAAO,GAAG,OAAO,CAAC;IAClC,eAAe,CAAC,YAAY,GAAG,YAAY,CAAC;IAC5C,eAAe,CAAC,cAAc,GAAG,cAAc,CAAC;IAEhD,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;QACrC,wBAAwB,CAAC,eAAe,EAAE,OAAO,EAAE,sBAAsB,CAAC,CAAC;KAC9E;IAED,OAAO,aAAa,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB,CAAC,eAAqC,EAAE,EAAgB,EAAE,sBAAgC;IAC9H,MAAM,OAAO,GAAG,eAAe,CAAC,OAAQ,CAAC;IACzC,MAAM,YAAY,GAAG,eAAe,CAAC,YAAa,CAAC;IACnD,MAAM,cAAc,GAAG,eAAe,CAAC,cAAe,CAAC;IACvD,MAAM,OAAO,GAAG,eAAe,CAAC,OAAQ,CAAC;IAEzC,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;IACzE,IAAI,CAAC,MAAM,EAAE;QACT,gBAAgB;QAChB,SAAS;QACT,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,YAAY,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE;YACzD,MAAM,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAC9C,IAAI,GAAG,EAAE;gBACL,eAAe,CAAC,sBAAsB,GAAG,GAAG,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAC;aAC3C;SACJ;QAED,WAAW;QACX,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE;YAC3D,MAAM,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YAChD,IAAI,GAAG,EAAE;gBACL,eAAe,CAAC,wBAAwB,GAAG,GAAG,CAAC;gBAC/C,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC;aAC7C;SACJ;QAED,MAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,KAAK,EAAE;YACP,eAAe,CAAC,gBAAgB,GAAG,KAAK,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SAC1B;KACJ;IAED,KAAI,SAAU,sBAAsB,EAAE;QAClC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;QAEhF,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACjD,IAAI,KAAK,EAAE;gBACP,eAAe,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBAC/C,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aAC1B;SACJ;KACJ;IAED,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IACnC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IAErC,eAAe,CAAC,YAAY,GAAG,SAAS,CAAC;IACzC,eAAe,CAAC,cAAc,GAAG,SAAS,CAAC;IAE3C,IAAI,eAAe,CAAC,UAAU,EAAE;QAC5B,eAAe,CAAC,UAAU,EAAE,CAAC;QAC7B,eAAe,CAAC,UAAU,GAAG,SAAS,CAAC;KAC1C;AACL,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CACnC,eAAiC,EACjC,gBAAwB,EACxB,kBAA0B,EAC1B,WAAoB,EACpB,oBAA4B,EAC5B,sBAA8B,EAC9B,aAAkB,EAClB,OAAyB,EACzB,yBAA6C,EAC7C,OAAe,EAAE,EACjB,+BAA+D,EAC/D,4BAAyD;IAEzD,MAAM,WAAW,GAAG,cAAc,CAAE,eAAwC,CAAC,OAAQ,CAAC,CAAC;IACvF,IAAI,CAAC,+BAA+B,EAAE;QAClC,+BAA+B,GAAG,WAAW,CAAC,+BAA+B,IAAI,sBAAsB,CAAC;KAC3G;IACD,IAAI,CAAC,4BAA4B,EAAE;QAC/B,4BAA4B,GAAG,WAAW,CAAC,4BAA4B,IAAI,mBAAmB,CAAC;KAClG;IACD,MAAM,mBAAmB,GAAG,eAAuC,CAAC;IAEpE,IAAI,WAAW,EAAE;QACb,mBAAmB,CAAC,OAAO,GAAG,+BAA+B,CACzD,mBAAmB,EACnB,gBAAgB,EAChB,kBAAkB,EAClB,mBAAmB,CAAC,OAAQ,EAC5B,yBAAyB,CAC5B,CAAC;KACL;SAAM;QACH,mBAAmB,CAAC,OAAO,GAAG,4BAA4B,CACtD,mBAAmB,EACnB,gBAAgB,EAChB,kBAAkB,EAClB,OAAO,EACP,mBAAmB,CAAC,OAAQ,EAC5B,yBAAyB,CAC5B,CAAC;KACL;IACD,mBAAmB,CAAC,OAAO,CAAC,wBAAwB,GAAG,aAAa,CAAC;AACzE,CAAC;AAED,SAAS,cAAc,CAAC,MAAc,EAAE,IAAY,EAAE,OAAyB,EAAE,aAAqB,EAAE,EAAgB,EAAE,eAAyB;IAC/I,OAAO,iBAAiB,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,aAAa,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC;AAC5G,CAAC;AAED,SAAS,iBAAiB,CAAC,MAAc,EAAE,IAAY,EAAE,EAAgB,EAAE,eAAyB;IAChG,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;IAE1F,IAAI,CAAC,MAAM,EAAE;QACT,IAAI,KAAK,GAAW,EAAE,CAAC,QAAQ,CAAC;QAChC,IAAI,SAAS,GAAW,EAAE,CAAC,QAAQ,CAAC;QACpC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;YAChD,KAAK,GAAG,SAAS,CAAC;SACrB;QAED,MAAM,IAAI,KAAK,CACX,4CAA4C,IAAI,4BAA4B,KAAK,sBAAsB,EAAE,CAAC,aAAa,EAAE,qBAAqB,eAAe,EAAE,CAClK,CAAC;KACL;IAED,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAEzB,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,OAAqB,EAAE,EAAgB;IAC/D,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oCAAoC,CAAC,eAAiC,EAAE,MAAoD;IACxI,MAAM,oBAAoB,GAAG,eAAuC,CAAC;IAErE,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,EAAE;QAC1C,MAAM,CAAC,eAAe,CAAC,CAAC;QACxB,OAAO;KACV;IAED,MAAM,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC;IAEnD,oBAAoB,CAAC,UAAU,GAAG,GAAG,EAAE;QACnC,UAAU,EAAE,EAAE,CAAC;QACf,MAAM,CAAC,eAAe,CAAC,CAAC;IAC5B,CAAC,CAAC;AACN,CAAC","sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { IPipelineContext } from \"./IPipelineContext\";\r\nimport type { ShaderProcessingContext } from \"./Processors/shaderProcessingOptions\";\r\nimport { WebGLPipelineContext } from \"./WebGL/webGLPipelineContext\";\r\nimport type { _loadFile } from \"./abstractEngine.functions\";\r\nimport { _ConcatenateShader } from \"./abstractEngine.functions\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IThinEngineStateObject {\r\n    _contextWasLost?: boolean;\r\n    validateShaderPrograms?: boolean;\r\n    _webGLVersion: number;\r\n    parallelShaderCompile?: { COMPLETION_STATUS_KHR: number };\r\n    _context?: WebGLContext;\r\n    _createShaderProgramInjection?: typeof _createShaderProgram;\r\n    createRawShaderProgramInjection?: typeof createRawShaderProgram;\r\n    createShaderProgramInjection?: typeof createShaderProgram;\r\n    loadFileInjection?: typeof _loadFile;\r\n    cachedPipelines: { [name: string]: IPipelineContext };\r\n}\r\n/**\r\n * @internal\r\n */\r\nconst _stateObject: WeakMap<WebGLContext, IThinEngineStateObject> = new WeakMap();\r\n\r\n/**\r\n * This will be used in cases where the engine doesn't have a context (like the nullengine)\r\n */\r\nconst singleStateObject: IThinEngineStateObject = {\r\n    _webGLVersion: 2,\r\n    cachedPipelines: {},\r\n};\r\n\r\n/**\r\n * get or create a state object for the given context\r\n * Note - Used in WebGL only at the moment.\r\n * @param context The context to get the state object from\r\n * @returns the state object\r\n * @internal\r\n */\r\nexport function getStateObject(context: WebGLContext): IThinEngineStateObject {\r\n    let state = _stateObject.get(context);\r\n    if (!state) {\r\n        if (!context) {\r\n            return singleStateObject;\r\n        }\r\n        state = {\r\n            // use feature detection. instanceof returns false. This only exists on WebGL2 context\r\n            _webGLVersion: (context as WebGL2RenderingContext).TEXTURE_BINDING_3D ? 2 : 1,\r\n            _context: context,\r\n            cachedPipelines: {},\r\n        };\r\n        _stateObject.set(context, state);\r\n    }\r\n    return state;\r\n}\r\n/**\r\n * Remove the state object that belongs to the specific context\r\n * @param context the context that is being\r\n */\r\nexport function deleteStateObject(context: WebGLContext): void {\r\n    _stateObject.delete(context);\r\n}\r\n\r\nexport type WebGLContext = WebGLRenderingContext | WebGL2RenderingContext;\r\n/**\r\n * Directly creates a webGL program\r\n * @param pipelineContext  defines the pipeline context to attach to\r\n * @param vertexCode defines the vertex shader code to use\r\n * @param fragmentCode defines the fragment shader code to use\r\n * @param context defines the webGL context to use (if not set, the current one will be used)\r\n * @param transformFeedbackVaryings defines the list of transform feedback varyings to use\r\n * @param _createShaderProgramInjection defines an optional injection to use to create the shader program\r\n * @returns the new webGL program\r\n */\r\nexport function createRawShaderProgram(\r\n    pipelineContext: IPipelineContext,\r\n    vertexCode: string,\r\n    fragmentCode: string,\r\n    context: WebGLContext,\r\n    transformFeedbackVaryings: Nullable<string[]>,\r\n    _createShaderProgramInjection?: typeof _createShaderProgram\r\n): WebGLProgram {\r\n    const stateObject = getStateObject(context);\r\n    if (!_createShaderProgramInjection) {\r\n        _createShaderProgramInjection = stateObject._createShaderProgramInjection ?? _createShaderProgram;\r\n    }\r\n\r\n    const vertexShader = _compileRawShader(vertexCode, \"vertex\", context, stateObject._contextWasLost);\r\n    const fragmentShader = _compileRawShader(fragmentCode, \"fragment\", context, stateObject._contextWasLost);\r\n\r\n    return _createShaderProgramInjection(\r\n        pipelineContext as WebGLPipelineContext,\r\n        vertexShader,\r\n        fragmentShader,\r\n        context,\r\n        transformFeedbackVaryings,\r\n        stateObject.validateShaderPrograms\r\n    );\r\n}\r\n\r\n/**\r\n * Creates a webGL program\r\n * @param pipelineContext  defines the pipeline context to attach to\r\n * @param vertexCode  defines the vertex shader code to use\r\n * @param fragmentCode defines the fragment shader code to use\r\n * @param defines defines the string containing the defines to use to compile the shaders\r\n * @param context defines the webGL context to use (if not set, the current one will be used)\r\n * @param transformFeedbackVaryings defines the list of transform feedback varyings to use\r\n * @param _createShaderProgramInjection defines an optional injection to use to create the shader program\r\n * @returns the new webGL program\r\n */\r\nexport function createShaderProgram(\r\n    pipelineContext: IPipelineContext,\r\n    vertexCode: string,\r\n    fragmentCode: string,\r\n    defines: Nullable<string>,\r\n    context: WebGLContext,\r\n    transformFeedbackVaryings: Nullable<string[]> = null,\r\n    _createShaderProgramInjection?: typeof _createShaderProgram\r\n): WebGLProgram {\r\n    const stateObject = getStateObject(context);\r\n    if (!_createShaderProgramInjection) {\r\n        _createShaderProgramInjection = stateObject._createShaderProgramInjection ?? _createShaderProgram;\r\n    }\r\n    const shaderVersion = stateObject._webGLVersion > 1 ? \"#version 300 es\\n#define WEBGL2 \\n\" : \"\";\r\n    const vertexShader = _compileShader(vertexCode, \"vertex\", defines, shaderVersion, context, stateObject._contextWasLost);\r\n    const fragmentShader = _compileShader(fragmentCode, \"fragment\", defines, shaderVersion, context, stateObject._contextWasLost);\r\n\r\n    return _createShaderProgramInjection(\r\n        pipelineContext as WebGLPipelineContext,\r\n        vertexShader,\r\n        fragmentShader,\r\n        context,\r\n        transformFeedbackVaryings,\r\n        stateObject.validateShaderPrograms\r\n    );\r\n}\r\n\r\n/**\r\n * Creates a new pipeline context. Note, make sure to attach an engine instance to the created context\r\n * @param context defines the webGL context to use (if not set, the current one will be used)\r\n * @param _shaderProcessingContext defines the shader processing context used during the processing if available\r\n * @returns the new pipeline\r\n */\r\nexport function createPipelineContext(context: WebGLContext, _shaderProcessingContext: Nullable<ShaderProcessingContext>): IPipelineContext {\r\n    const pipelineContext = new WebGLPipelineContext();\r\n    const stateObject = getStateObject(context);\r\n    if (stateObject.parallelShaderCompile) {\r\n        pipelineContext.isParallelCompiled = true;\r\n    }\r\n    pipelineContext.context = stateObject._context;\r\n    return pipelineContext;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _createShaderProgram(\r\n    pipelineContext: WebGLPipelineContext,\r\n    vertexShader: WebGLShader,\r\n    fragmentShader: WebGLShader,\r\n    context: WebGLContext,\r\n    _transformFeedbackVaryings: Nullable<string[]> = null,\r\n    validateShaderPrograms?: boolean\r\n): WebGLProgram {\r\n    const shaderProgram = context.createProgram();\r\n    pipelineContext.program = shaderProgram;\r\n\r\n    if (!shaderProgram) {\r\n        throw new Error(\"Unable to create program\");\r\n    }\r\n\r\n    context.attachShader(shaderProgram, vertexShader);\r\n    context.attachShader(shaderProgram, fragmentShader);\r\n\r\n    context.linkProgram(shaderProgram);\r\n\r\n    pipelineContext.context = context;\r\n    pipelineContext.vertexShader = vertexShader;\r\n    pipelineContext.fragmentShader = fragmentShader;\r\n\r\n    if (!pipelineContext.isParallelCompiled) {\r\n        _finalizePipelineContext(pipelineContext, context, validateShaderPrograms);\r\n    }\r\n\r\n    return shaderProgram;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _finalizePipelineContext(pipelineContext: WebGLPipelineContext, gl: WebGLContext, validateShaderPrograms?: boolean) {\r\n    const context = pipelineContext.context!;\r\n    const vertexShader = pipelineContext.vertexShader!;\r\n    const fragmentShader = pipelineContext.fragmentShader!;\r\n    const program = pipelineContext.program!;\r\n\r\n    const linked = context.getProgramParameter(program, context.LINK_STATUS);\r\n    if (!linked) {\r\n        // Get more info\r\n        // Vertex\r\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n            const log = gl.getShaderInfoLog(vertexShader);\r\n            if (log) {\r\n                pipelineContext.vertexCompilationError = log;\r\n                throw new Error(\"VERTEX SHADER \" + log);\r\n            }\r\n        }\r\n\r\n        // Fragment\r\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n            const log = gl.getShaderInfoLog(fragmentShader);\r\n            if (log) {\r\n                pipelineContext.fragmentCompilationError = log;\r\n                throw new Error(\"FRAGMENT SHADER \" + log);\r\n            }\r\n        }\r\n\r\n        const error = context.getProgramInfoLog(program);\r\n        if (error) {\r\n            pipelineContext.programLinkError = error;\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n    if (/*this.*/ validateShaderPrograms) {\r\n        context.validateProgram(program);\r\n        const validated = context.getProgramParameter(program, context.VALIDATE_STATUS);\r\n\r\n        if (!validated) {\r\n            const error = context.getProgramInfoLog(program);\r\n            if (error) {\r\n                pipelineContext.programValidationError = error;\r\n                throw new Error(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    context.deleteShader(vertexShader);\r\n    context.deleteShader(fragmentShader);\r\n\r\n    pipelineContext.vertexShader = undefined;\r\n    pipelineContext.fragmentShader = undefined;\r\n\r\n    if (pipelineContext.onCompiled) {\r\n        pipelineContext.onCompiled();\r\n        pipelineContext.onCompiled = undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _preparePipelineContext(\r\n    pipelineContext: IPipelineContext,\r\n    vertexSourceCode: string,\r\n    fragmentSourceCode: string,\r\n    createAsRaw: boolean,\r\n    _rawVertexSourceCode: string,\r\n    _rawFragmentSourceCode: string,\r\n    rebuildRebind: any,\r\n    defines: Nullable<string>,\r\n    transformFeedbackVaryings: Nullable<string[]>,\r\n    _key: string = \"\",\r\n    createRawShaderProgramInjection?: typeof createRawShaderProgram,\r\n    createShaderProgramInjection?: typeof createShaderProgram\r\n) {\r\n    const stateObject = getStateObject((pipelineContext as WebGLPipelineContext).context!);\r\n    if (!createRawShaderProgramInjection) {\r\n        createRawShaderProgramInjection = stateObject.createRawShaderProgramInjection ?? createRawShaderProgram;\r\n    }\r\n    if (!createShaderProgramInjection) {\r\n        createShaderProgramInjection = stateObject.createShaderProgramInjection ?? createShaderProgram;\r\n    }\r\n    const webGLRenderingState = pipelineContext as WebGLPipelineContext;\r\n\r\n    if (createAsRaw) {\r\n        webGLRenderingState.program = createRawShaderProgramInjection(\r\n            webGLRenderingState,\r\n            vertexSourceCode,\r\n            fragmentSourceCode,\r\n            webGLRenderingState.context!,\r\n            transformFeedbackVaryings\r\n        );\r\n    } else {\r\n        webGLRenderingState.program = createShaderProgramInjection(\r\n            webGLRenderingState,\r\n            vertexSourceCode,\r\n            fragmentSourceCode,\r\n            defines,\r\n            webGLRenderingState.context!,\r\n            transformFeedbackVaryings\r\n        );\r\n    }\r\n    webGLRenderingState.program.__SPECTOR_rebuildProgram = rebuildRebind;\r\n}\r\n\r\nfunction _compileShader(source: string, type: string, defines: Nullable<string>, shaderVersion: string, gl: WebGLContext, _contextWasLost?: boolean): WebGLShader {\r\n    return _compileRawShader(_ConcatenateShader(source, defines, shaderVersion), type, gl, _contextWasLost);\r\n}\r\n\r\nfunction _compileRawShader(source: string, type: string, gl: WebGLContext, _contextWasLost?: boolean): WebGLShader {\r\n    const shader = gl.createShader(type === \"vertex\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\r\n\r\n    if (!shader) {\r\n        let error: GLenum = gl.NO_ERROR;\r\n        let tempError: GLenum = gl.NO_ERROR;\r\n        while ((tempError = gl.getError()) !== gl.NO_ERROR) {\r\n            error = tempError;\r\n        }\r\n\r\n        throw new Error(\r\n            `Something went wrong while creating a gl ${type} shader object. gl error=${error}, gl isContextLost=${gl.isContextLost()}, _contextWasLost=${_contextWasLost}`\r\n        );\r\n    }\r\n\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n\r\n    return shader;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _setProgram(program: WebGLProgram, gl: WebGLContext): void {\r\n    gl.useProgram(program);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _executeWhenRenderingStateIsCompiled(pipelineContext: IPipelineContext, action: (pipelineContext?: IPipelineContext) => void) {\r\n    const webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n\r\n    if (!webGLPipelineContext.isParallelCompiled) {\r\n        action(pipelineContext);\r\n        return;\r\n    }\r\n\r\n    const oldHandler = webGLPipelineContext.onCompiled;\r\n\r\n    webGLPipelineContext.onCompiled = () => {\r\n        oldHandler?.();\r\n        action(pipelineContext);\r\n    };\r\n}\r\n"]}