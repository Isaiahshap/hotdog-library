{"version":3,"file":"gpuPicker.js","sourceRoot":"","sources":["../../../../dev/core/src/Collisions/gpuPicker.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from \"core/Engines/constants\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { WebGPUEngine } from \"core/Engines/webgpuEngine\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { VertexBuffer } from \"core/Meshes/buffer\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport \"../Shaders/picking.fragment\";\r\nimport \"../Shaders/picking.vertex\";\r\n\r\n/**\r\n * Class used to store the result of a GPU picking operation\r\n */\r\nexport interface IGPUPickingInfo {\r\n    /**\r\n     * Picked mesh\r\n     */\r\n    mesh: AbstractMesh;\r\n}\r\n\r\n/**\r\n * Class used to perform a picking operation using GPU\r\n * Please note that GPUPIcker cannot pick instances, only meshes\r\n */\r\nexport class GPUPicker {\r\n    private _pickingTexure: Nullable<RenderTargetTexture> = null;\r\n    private _idMap: Array<number> = [];\r\n    private _idColors: Array<Color3> = [];\r\n    private _cachedScene: Nullable<Scene>;\r\n    private _renderMaterial: Nullable<ShaderMaterial>;\r\n    private _pickableMeshes: Array<AbstractMesh>;\r\n    private _readbuffer: Uint8Array;\r\n    private _meshRenderingCount: number = 0;\r\n    private readonly _attributeName = \"instanceMeshID\";\r\n\r\n    private _createRenderTarget(scene: Scene, width: number, height: number) {\r\n        if (this._pickingTexure) {\r\n            this._pickingTexure.dispose();\r\n        }\r\n        this._pickingTexure = new RenderTargetTexture(\r\n            \"pickingTexure\",\r\n            { width: width, height: height },\r\n            scene,\r\n            false,\r\n            undefined,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            false,\r\n            Constants.TEXTURE_NEAREST_NEAREST\r\n        );\r\n    }\r\n\r\n    private _createColorMaterial(scene: Scene) {\r\n        if (this._renderMaterial) {\r\n            this._renderMaterial.dispose();\r\n        }\r\n\r\n        const defines: string[] = [];\r\n        const options = {\r\n            attributes: [VertexBuffer.PositionKind, this._attributeName],\r\n            uniforms: [\"world\", \"viewProjection\", \"meshID\"],\r\n            needAlphaBlending: false,\r\n            defines: defines,\r\n            useClipPlane: null,\r\n        };\r\n\r\n        this._renderMaterial = new ShaderMaterial(\"pickingShader\", scene, \"picking\", options, false);\r\n\r\n        const callback = (mesh: AbstractMesh | undefined) => {\r\n            if (!mesh) {\r\n                return;\r\n            }\r\n\r\n            const effect = this._renderMaterial!.getEffect();\r\n\r\n            if (!mesh.hasInstances && !mesh.isAnInstance) {\r\n                effect.setColor4(\"meshID\", this._idColors[mesh.uniqueId], 1);\r\n            }\r\n\r\n            this._meshRenderingCount++;\r\n        };\r\n\r\n        this._renderMaterial.onBindObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Set the list of meshes to pick from\r\n     * Set that value to null to clear the list (and avoid leaks)\r\n     * The module will read and delete from the array provided by reference. Disposing the module or setting the value to null will clear the array.\r\n     * @param list defines the list of meshes to pick from\r\n     */\r\n    public setPickingList(list: Nullable<Array<AbstractMesh>>) {\r\n        if (this._pickableMeshes) {\r\n            // Cleanup\r\n            for (let index = 0; index < this._pickableMeshes.length; index++) {\r\n                const mesh = this._pickableMeshes[index];\r\n                if (mesh.hasInstances) {\r\n                    (mesh as Mesh).removeVerticesData(this._attributeName);\r\n                }\r\n                if (this._pickingTexure) {\r\n                    this._pickingTexure.setMaterialForRendering(mesh, undefined);\r\n                }\r\n            }\r\n            this._pickableMeshes.length = 0;\r\n            this._idMap.length = 0;\r\n            this._idColors.length = 0;\r\n            if (this._pickingTexure) {\r\n                this._pickingTexure.renderList = [];\r\n            }\r\n        }\r\n        if (!list || list.length === 0) {\r\n            return;\r\n        }\r\n        this._pickableMeshes = list;\r\n\r\n        // Prepare target\r\n        const scene = list[0].getScene();\r\n        const engine = scene.getEngine();\r\n        const rttSizeW = engine.getRenderWidth();\r\n        const rttSizeH = engine.getRenderHeight();\r\n        if (!this._pickingTexure) {\r\n            this._createRenderTarget(scene, rttSizeW, rttSizeH);\r\n        } else {\r\n            const size = this._pickingTexure.getSize();\r\n\r\n            if (size.width !== rttSizeW || size.height !== rttSizeH || this._cachedScene !== scene) {\r\n                this._createRenderTarget(scene, rttSizeW, rttSizeH);\r\n            }\r\n        }\r\n\r\n        if (!this._cachedScene || this._cachedScene !== scene) {\r\n            this._createColorMaterial(scene);\r\n        }\r\n\r\n        this._cachedScene = scene;\r\n        this._pickingTexure!.renderList = [];\r\n\r\n        // We will affect colors and create vertex color buffers\r\n        let id = 1;\r\n        for (let index = 0; index < this._pickableMeshes.length; index++) {\r\n            const mesh = this._pickableMeshes[index];\r\n            this._pickingTexure!.setMaterialForRendering(mesh, this._renderMaterial!);\r\n            this._pickingTexure!.renderList.push(mesh);\r\n\r\n            if (mesh.isAnInstance) {\r\n                continue; // This will be handled by the source mesh\r\n            }\r\n\r\n            const r = (id & 0xff0000) >> 16;\r\n            const g = (id & 0x00ff00) >> 8;\r\n            const b = (id & 0x0000ff) >> 0;\r\n            this._idMap[id] = index;\r\n            id++;\r\n\r\n            if (mesh.hasInstances) {\r\n                const instances = (mesh as Mesh).instances;\r\n                const colorData = new Float32Array(4 * (instances.length + 1));\r\n                const engine = mesh.getEngine();\r\n\r\n                colorData[0] = r / 255.0;\r\n                colorData[1] = g / 255.0;\r\n                colorData[2] = b / 255.0;\r\n                colorData[3] = 1.0;\r\n                for (let i = 0; i < instances.length; i++) {\r\n                    const instance = instances[i];\r\n                    const r = (id & 0xff0000) >> 16;\r\n                    const g = (id & 0x00ff00) >> 8;\r\n                    const b = (id & 0x0000ff) >> 0;\r\n                    this._idMap[id] = this._pickableMeshes.indexOf(instance);\r\n\r\n                    colorData[(i + 1) * 4] = r / 255.0;\r\n                    colorData[(i + 1) * 4 + 1] = g / 255.0;\r\n                    colorData[(i + 1) * 4 + 2] = b / 255.0;\r\n                    colorData[(i + 1) * 4 + 3] = 1.0;\r\n                    id++;\r\n                }\r\n\r\n                const buffer = new VertexBuffer(engine, colorData, this._attributeName, false, false, 4, true);\r\n                (mesh as Mesh).setVerticesBuffer(buffer, true);\r\n            } else {\r\n                this._idColors[mesh.uniqueId] = Color3.FromInts(r, g, b);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a picking operation\r\n     * @param x defines the X coordinates where to run the pick\r\n     * @param y defines the Y coordinates where to run the pick\r\n     * @param disposeWhenDone defines a boolean indicating we do not want to keep resources alive (false by default)\r\n     * @returns A promise with the picking results\r\n     */\r\n    public pickAsync(x: number, y: number, disposeWhenDone = false): Promise<Nullable<IGPUPickingInfo>> {\r\n        if (!this._pickableMeshes || this._pickableMeshes.length === 0) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        const scene = this._cachedScene!;\r\n        const engine = scene.getEngine();\r\n        const rttSizeW = engine.getRenderWidth();\r\n        const rttSizeH = engine.getRenderHeight();\r\n\r\n        if (!this._readbuffer) {\r\n            this._readbuffer = new Uint8Array(engine.isWebGPU ? 256 : 4); // Because of block alignment in WebGPU\r\n        }\r\n\r\n        // Do we need to rebuild the RTT?\r\n        const size = this._pickingTexure!.getSize();\r\n\r\n        if (size.width !== rttSizeW || size.height !== rttSizeH) {\r\n            this._createRenderTarget(scene, rttSizeW, rttSizeH);\r\n\r\n            this._pickingTexure!.renderList = [];\r\n            for (let index = 0; index < this._pickableMeshes.length; index++) {\r\n                const mesh = this._pickableMeshes[index];\r\n                this._pickingTexure!.setMaterialForRendering(mesh, this._renderMaterial!);\r\n                this._pickingTexure!.renderList.push(mesh);\r\n            }\r\n        }\r\n\r\n        this._meshRenderingCount = 0;\r\n        // Ensure ints\r\n        x = x >> 0;\r\n        y = y >> 0;\r\n\r\n        if (x < 0 || y < 0 || x >= rttSizeW || y >= rttSizeH) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        // Invert Y\r\n        y = rttSizeH - y;\r\n\r\n        this._pickingTexure!.clearColor = new Color4(0, 0, 0, 0);\r\n\r\n        scene.customRenderTargets.push(this._pickingTexure!);\r\n        this._pickingTexure!.onBeforeRender = () => {\r\n            // Enable scissor\r\n            if ((engine as WebGPUEngine | Engine).enableScissor) {\r\n                (engine as WebGPUEngine | Engine).enableScissor(x, y, 1, 1);\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._pickingTexure!.onAfterRender = async () => {\r\n                // Disable scissor\r\n                if ((engine as WebGPUEngine | Engine).disableScissor) {\r\n                    (engine as WebGPUEngine | Engine).disableScissor();\r\n                }\r\n\r\n                if (!this._pickingTexure) {\r\n                    reject();\r\n                }\r\n\r\n                let pickedMesh: Nullable<AbstractMesh> = null;\r\n                const wasSuccessfull = this._meshRenderingCount > 0;\r\n\r\n                if (wasSuccessfull) {\r\n                    // Remove from the active RTTs\r\n                    const index = scene.customRenderTargets.indexOf(this._pickingTexure!);\r\n                    if (index > -1) {\r\n                        scene.customRenderTargets.splice(index, 1);\r\n                    }\r\n\r\n                    // Do the actual picking\r\n                    if (await this._readTexturePixelsAsync(x, y)) {\r\n                        const r = this._readbuffer[0];\r\n                        const g = this._readbuffer[1];\r\n                        const b = this._readbuffer[2];\r\n                        const colorId = (r << 16) + (g << 8) + b;\r\n                        pickedMesh = this._pickableMeshes[this._idMap[colorId]];\r\n                    }\r\n                }\r\n\r\n                // Clean-up\r\n                if (!wasSuccessfull) {\r\n                    this._meshRenderingCount = 0;\r\n                    return; // We need to wait for the shaders to be ready\r\n                } else {\r\n                    if (disposeWhenDone) {\r\n                        this.dispose();\r\n                    }\r\n                    if (pickedMesh) {\r\n                        resolve({ mesh: pickedMesh });\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    private async _readTexturePixelsAsync(x: number, y: number) {\r\n        if (!this._cachedScene || !this._pickingTexure?._texture) {\r\n            return false;\r\n        }\r\n        const engine = this._cachedScene.getEngine();\r\n        await engine._readTexturePixels(this._pickingTexure._texture, 1, 1, -1, 0, this._readbuffer, true, true, x, y);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** Release the resources */\r\n    public dispose() {\r\n        this.setPickingList(null);\r\n        this._cachedScene = null;\r\n\r\n        // Cleaning up\r\n        this._pickingTexure?.dispose();\r\n        this._pickingTexure = null;\r\n        this._renderMaterial?.dispose();\r\n        this._renderMaterial = null;\r\n    }\r\n}\r\n"]}