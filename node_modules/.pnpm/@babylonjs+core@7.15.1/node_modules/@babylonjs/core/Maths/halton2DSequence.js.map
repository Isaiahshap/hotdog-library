{"version":3,"file":"halton2DSequence.js","sourceRoot":"","sources":["../../../../dev/core/src/Maths/halton2DSequence.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IAmBzB;;;;;;;OAOG;IACH,YAAY,UAAkB,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC;QA1BnE,cAAS,GAAG,CAAC,CAAC;QACd,cAAS,GAAa,EAAE,CAAC;QACzB,gBAAW,GAAG,CAAC,CAAC;QAMxB;;WAEG;QACa,MAAC,GAAG,CAAC,CAAC;QAEtB;;WAEG;QACa,MAAC,GAAG,CAAC,CAAC;QAWlB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,UAAkB;QAChC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACI,aAAa,CAAC,KAAa,EAAE,MAAc;QAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,IAAI;QACN,IAAI,CAAC,CAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACjE,IAAI,CAAC,CAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QAEvE,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;QAEpB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;YACxC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;SACtB;IACL,CAAC;IAEO,iBAAiB,CAAC,UAAkB;QACxC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,EAAE,EAAE,CAAC,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;SAC/F;IACL,CAAC;IAEO,OAAO,CAAC,KAAa,EAAE,IAAY;QACvC,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,OAAO,KAAK,GAAG,CAAC,EAAE;YACd,QAAQ,IAAI,IAAI,CAAC;YACjB,MAAM,IAAI,QAAQ,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;YACpC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,iBAAiB;SAC9C;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["/**\r\n * Class for generating 2D Halton sequences.\r\n * From https://observablehq.com/@jrus/halton\r\n */\r\nexport class Halton2DSequence {\r\n    private _curIndex = 0;\r\n    private _sequence: number[] = [];\r\n    private _numSamples = 0;\r\n    private _width: number;\r\n    private _height: number;\r\n    private _baseX;\r\n    private _baseY;\r\n\r\n    /**\r\n     * The x coordinate of the current sample.\r\n     */\r\n    public readonly x = 0;\r\n\r\n    /**\r\n     * The y coordinate of the current sample.\r\n     */\r\n    public readonly y = 0;\r\n\r\n    /**\r\n     * Creates a new Halton2DSequence.\r\n     * @param numSamples Number of samples in the sequence.\r\n     * @param baseX The base for the x coordinate (default: 2).\r\n     * @param baseY The base for the y coordinate (default: 3).\r\n     * @param width Factor to scale the x coordinate by (default: 1). The scaling factor is 1/width.\r\n     * @param height Factor to scale the y coordinate by (default: 1). The scaling factor is 1/height.\r\n     */\r\n    constructor(numSamples: number, baseX = 2, baseY = 3, width = 1, height = 1) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._baseX = baseX;\r\n        this._baseY = baseY;\r\n\r\n        this._generateSequence(numSamples);\r\n        this.next();\r\n    }\r\n\r\n    /**\r\n     * Regenerates the sequence with a new number of samples.\r\n     * @param numSamples Number of samples in the sequence.\r\n     */\r\n    public regenerate(numSamples: number) {\r\n        this._generateSequence(numSamples);\r\n        this.next();\r\n    }\r\n\r\n    /**\r\n     * Sets the dimensions of the sequence.\r\n     * @param width Factor to scale the x coordinate by. The scaling factor is 1/width.\r\n     * @param height Factor to scale the y coordinate by. The scaling factor is 1/height.\r\n     */\r\n    public setDimensions(width: number, height: number) {\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n\r\n    /**\r\n     * Advances to the next sample in the sequence.\r\n     */\r\n    public next() {\r\n        (this.x as number) = this._sequence[this._curIndex] / this._width;\r\n        (this.y as number) = this._sequence[this._curIndex + 1] / this._height;\r\n\r\n        this._curIndex += 2;\r\n\r\n        if (this._curIndex >= this._numSamples * 2) {\r\n            this._curIndex = 0;\r\n        }\r\n    }\r\n\r\n    private _generateSequence(numSamples: number) {\r\n        this._sequence = [];\r\n        this._curIndex = 0;\r\n        this._numSamples = numSamples;\r\n\r\n        for (let i = 1; i <= numSamples; ++i) {\r\n            this._sequence.push(this._halton(i, this._baseX) - 0.5, this._halton(i, this._baseY) - 0.5);\r\n        }\r\n    }\r\n\r\n    private _halton(index: number, base: number) {\r\n        let fraction = 1;\r\n        let result = 0;\r\n        while (index > 0) {\r\n            fraction /= base;\r\n            result += fraction * (index % base);\r\n            index = ~~(index / base); // floor division\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"]}